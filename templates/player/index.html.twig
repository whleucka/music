<div class="bg-light d-flex align-items-center justify-content-center">
    <span id="cover" class="d-flex align-items-center">
        {% if player.source %}
            <div class="loader lds-ellipsis"><div></div><div></div><div></div><div></div></div>
        {% endif %}
        <img src="{{ player.cover }}" title="{{ player.album|raw }}" onError="this.src = '/images/no-album.png'" alt="cover" />
    </span>
    <span id="info" class="d-none d-md-block">
        <div class="d-flex flex-column ps-2">
            <div class="truncate" title="{{ player.title|raw }}"><strong>{{ player.title|raw }}</strong></div>
            <div class="truncate text-muted" title="{{ player.artist|raw }}"><small>{{ player.artist|raw }}</small></div>
        </div>
    </span>
    <span id="controls" class="p-1 d-flex flex-column align-items-center justify-content-center w-100">
        <div id="track-progress" class="progress w-100 mt-3">
            <div class="progress-bar track-progress" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>
            <div class="progress-bar buffer" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div class="d-flex">
            <!-- <button class="btn" id="repeat"><i class="bi bi-repeat"></i></button> -->
            <button class="btn" id="prev-track" hx-get="/playlist/prev-track" hx-trigger="click, prevTrack from:body" hx-swap="none"><i class="bi bi-skip-start"></i></button>
            <button class="btn" id="rewind" onClick="seekBackward(event)"><i class="bi bi-rewind"></i></button>
            <button class="btn" id="play" onClick="playPause()"><i class="bi bi-play"></i></button>
            <button class="btn" id="fast-forward" onClick="seekForward(event)"><i class="bi bi-fast-forward"></i></button>
            <button class="btn" id="next-track" hx-get="/playlist/next-track" hx-trigger="click, nextTrack from:body" hx-swap="none"><i class="bi bi-skip-end"></i></button>
            <button class="btn" hx-get="/playlist/shuffle"hx-trigger="load" hx-swap="outerHTML" style="width: 48px;"></button>
        </div>
    </span>
    <span id="volume" class="d-none d-lg-block me-3">
        <div class="d-flex align-items-center">
            <i class="bi bi-volume-up me-1"></i>
            <div id="volume-progress" class="progress w-100">
                <div class="progress-bar" role="progressbar" style="width: 100%" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </span>
    <audio id="audio" src="{{ player.source }}">Your browser does not support the audio element.</audio>
</div>

<script>
    var id = '{{ player.id }}';
    var player = document.getElementById("audio");
    var playButton = document.querySelector("#play");
    var trackProgress = document.querySelector(".track-progress");
    var bufferProgress = document.querySelector(".buffer");
    var volumeProgress = document.querySelector("#volume-progress");
    var currentTrack = document.getElementById(id);
    var defaultSkipTime = 10;

    var updateProgress = () => {
        if (!player.paused && !player.ended) {
            if (player.readyState >= 2) { // Check if player has loaded some data
                let progress = (player.currentTime / player.duration) * 100;
                setTrackProgress(progress);

                if (player.buffered.length > 0) {
                    let bufferedEnd = player.buffered.end(player.buffered.length - 1);
                    let buffer = (bufferedEnd / player.duration) * 100;
                    setBufferProgress(buffer - progress);
                }
                updatePositionState();
                requestAnimationFrame(updateProgress);
            }
        }
    };

    var decodeHTML = (html) => {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }

    var updateMetaData = () => {
        let artwork = [
            { src: '{{ player.cover }}',  sizes: '96x96',   type: 'image/png' },
            { src: '{{ player.cover }}', sizes: '128x128', type: 'image/png' },
            { src: '{{ player.cover }}', sizes: '192x192', type: 'image/png' },
            { src: '{{ player.cover }}', sizes: '256x256', type: 'image/png' },
            { src: '{{ player.cover }}', sizes: '384x384', type: 'image/png' },
            { src: '{{ player.cover }}', sizes: '512x512', type: 'image/png' },
        ];
        navigator.mediaSession.metadata = new MediaMetadata({
            title: decodeHTML('{{ player.title|raw }}'),
            artist: decodeHTML('{{ player.artist|raw }}'),
            album: decodeHTML('{{ player.album|raw }}'),
            artwork
        });
        updatePositionState();
    }

    var updatePositionState = () => {
        if ('setPositionState' in navigator.mediaSession && !isNaN(player.duration) && player.duration > 0) {
            navigator.mediaSession.setPositionState({
                duration: player.duration,
                playbackRate: player.playbackRate,
                position: player.currentTime
            });
        }
    }

    var playPause = () => {
        if (player.paused) {
            play();
        } else {
            pause();
        }
    }

    var play = async () => {
        player.playbackRate = 1.0;
        await player.play()
            .then(_ => updateMetaData())
            .catch(err => console.log(err));
    }

    var pause = async () => {
        player.pause();
    }

    var setTrackProgress = (pct) => {
        trackProgress.style.width = pct + '%';
    }

    var setBufferProgress = (pct) => {
        bufferProgress.style.width = pct + '%';
    }

    var setActiveTrack = () => {
        if (currentTrack) {
            removeActiveTrack();
            currentTrack.classList.add("active");
            currentTrack.focus();
        }
    }

    var removeActiveTrack = () => {
        document.querySelectorAll(".track-row").forEach((row) => {
            row.classList.remove("active");
        });
    }

    var seekForward = (event) => {
        const skipTime = event.seekOffset || defaultSkipTime;
        player.currentTime = Math.min(player.currentTime + skipTime, player.duration);
        updatePositionState();
    }

    var seekBackward = (event) => {
        const skipTime = event.seekOffset || defaultSkipTime;
        player.currentTime = Math.max(player.currentTime - skipTime, 0);
        updatePositionState();
    }

    var seek = (event) => {
        if (event.fastSeek && ('fastSeek' in audio)) {
            player.fastSeek(event.seekTime);
            return;
        }
        player.currentTime = event.seekTime;
        updatePositionState();
    }

    // Listeners
    volumeProgress.addEventListener('click', (event) => {
        // Calculate where in the progress bar the user clicked (0 to 1)
        const progressBar = volumeProgress.getBoundingClientRect();
        const clickPositionX = event.clientX - progressBar.left;
        const clickPositionPercentage = clickPositionX / progressBar.width;

        // Set the volume (0 to 1) based on click position
        player.volume = Math.min(Math.max(clickPositionPercentage, 0), 1);

        // Update the progress bar visual
        const progress = volumeProgress.querySelector('.progress-bar');
        progress.style.width = (clickPositionPercentage * 100) + '%';
    });

    player.onplay  = () => {
        navigator.mediaSession.playbackState = 'playing';
        playButton.innerHTML = `<i class="bi bi-pause"></i>`;
        trackProgress.classList.remove("disable");
    }

    player.onplaying = () => {
        requestAnimationFrame(updateProgress);
    }

    player.onpause = () => {
        navigator.mediaSession.playbackState = 'paused';
        playButton.innerHTML = `<i class="bi bi-play"></i>`;
        trackProgress.classList.add("disable");
    }

    player.onended = () => {
        setTrackProgress(0);
        setBufferProgress(8);
        htmx.trigger("#next-track", "nextTrack");
    }

    player.onloadstart = () => {
        if (id != '') {
            document.querySelector("#player #cover img").style.display = "none";
            document.querySelector("#player #cover .loader").style.display = "block";
        }
    }

    player.onloadeddata = () => {
        if (id != '') {
            document.querySelector("#player #cover img").style.display = "block";
            document.querySelector("#player .loader").style.display = "none";
            setActiveTrack();
            play();
        }
    }

    navigator.mediaSession.setActionHandler('play', async () => await player.play());
    navigator.mediaSession.setActionHandler('pause', _ => player.pause());
    navigator.mediaSession.setActionHandler('previoustrack', _ => htmx.trigger("#prev-track", "prevTrack"));
    navigator.mediaSession.setActionHandler('nexttrack', _ => htmx.trigger("#next-track", "nextTrack"));
    navigator.mediaSession.setActionHandler('seekbackward', (event) => seekBackward(event));
    navigator.mediaSession.setActionHandler('seekforward', (event) => seekForward(event));
    try {
        navigator.mediaSession.setActionHandler('seekto', (event) => seek(event));
    } catch(error) {
        console.log(err);
    }
</script>
