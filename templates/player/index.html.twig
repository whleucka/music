<div class="bg-light d-flex align-items-center justify-content-center">
    <span id="cover" class="d-flex align-items-center">
        <img src="{{ player.cover }}" alt="cover" />
    </span>
    {% if player.source %}
    <span id="info" class="d-none d-md-block">
        <div class="d-flex flex-column ps-2">
            <div class="truncate" title="{{ player.title|raw }}"><strong>{{ player.title|raw }}</strong></div>
            <div class="truncate text-muted" title="{{ player.artist|raw }}"><small>{{ player.artist|raw }}</small></div>
        </div>
    </span>
    {% endif %}
    <span id="controls" class="p-1 d-flex flex-column align-items-center justify-content-center w-100">
        <div id="track-progress" class="progress w-100 mt-3">
            <div class="progress-bar track-progress" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>
            <div class="progress-bar buffer" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div class="d-flex">
            <!-- <button class="btn" id="repeat"><i class="bi bi-repeat"></i></button> -->
            <button class="btn" id="prev-track" hx-get="/player/prev-track" hx-trigger="click, prevTrack from:body" hx-swap="none"><i class="bi bi-skip-start"></i></button>
            <button class="btn" id="rewind"><i class="bi bi-rewind"></i></button>
            <button class="btn" id="play" onClick="playPause()"><i class="bi bi-play"></i></button>
            <button class="btn" id="fast-forward"><i class="bi bi-fast-forward"></i></button>
            <button class="btn" id="next-track" hx-get="/player/next-track" hx-trigger="click, nextTrack from:body" hx-swap="none"><i class="bi bi-skip-end"></i></button>
            <button class="btn" id="shuffle"><i class="bi bi-shuffle"></i></button>
        </div>
    </span>
    {% if player.source %}
    <span id="volume" class="px-3 d-none d-lg-block">
        <div class="d-flex align-items-center">
            <i class="bi bi-volume-up me-1"></i>
            <div id="volume-progress" class="progress w-100">
                <div class="progress-bar" role="progressbar" style="width: 35%" aria-valuenow="35" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>
    </span>
    {% endif %}
    <audio id="audio" src="{{ player.source }}">Your browser does not support the audio element.</audio>
</div>

<script>
    var player = document.getElementById("audio");
    var playButton = document.getElementById("play");
    var trackProgress = document.querySelector(".track-progress");
    var bufferProgress = document.querySelector(".buffer");

    var updateProgress = () => {
        if (!player.paused && !player.ended) {
            if (player.readyState === 4) {
                let preloded = 0;
                if (player.buffered.length > 0) {
                    preloaded = (player.buffered.end(0) / player.duration) * 100;
                    const progress = (player.currentTime / player.duration) * 100;
                    setTrackProgress(progress);

                    if (preloaded > 0) {
                        setBufferProgress(preloaded - progress);
                    }
                }
                requestAnimationFrame(updateProgress);
            }
        }
    }

    var updateMetaData = () => {
        console.log('Playing ' + player.title + ' track...');
        let artwork = [
            { src: '{{ player.cover }}', sizes: '192x192', type: 'image/png' }
        ];
        navigator.mediaSession.metadata = new MediaMetadata({
            title: '{{ player.title }}',
            artist: '{{ player.artist }}',
            album: '{{ player.album }}',
            artwork
        });
        updatePositionState();
    }

    var updatePositionState = () => {
        if ('setPositionState' in navigator.mediaSession) {
            navigator.mediaSession.setPositionState({
                duration: player.duration,
                playbackRate: player.playbackRate,
                position: player.currentTime
            });
        }
    }

    var playPause = () => {
        if (player.paused) {
            play();
        } else {
            pause();
        }
    }

    var play = async () => {
        audio.play()
        .then(_ => updateMetaData())
        .catch(err => console.log(err));
    }

    var pause = async () => {
        return await player.pause();
    }

    var setTrackProgress = (pct) => {
        trackProgress.style.width = pct + '%';
    }

    var setBufferProgress = (pct) => {
        bufferProgress.style.width = pct + '%';
    }

    var setActiveTrack = () => {
        const currentTrack = document.getElementById('{{ player.id }}');
        if (currentTrack) currentTrack.classList.toggle("active");
        currentTrack.focus();
    }

    var removeActiveTrack = () => {
        const trackRows = document.querySelectorAll(".track-row");
        trackRows.forEach((row) => {
            row.classList.remove("active");
        });
    }

    // Listeners
    player.onplay  = () => {
        playButton.innerHTML = `<i class="bi bi-pause"></i>`;
        removeActiveTrack();
        setActiveTrack();

        requestAnimationFrame(updateProgress);
    }

    player.onpause = () => {
        playButton.innerHTML = `<i class="bi bi-play"></i>`;
    }

    player.onended = () => {
        setTrackProgress(0);
        setBufferProgress(8);
        removeActiveTrack();
        htmx.trigger("#next-track", "nextTrack");
    }

    player.onloadeddata = () => {
        play();
    }

    navigator.mediaSession.setActionHandler('previoustrack', function() {
        htmx.trigger("#prev-track", "prevTrack");
    });

    navigator.mediaSession.setActionHandler('nexttrack', function() {
        htmx.trigger("#next-track", "nextTrack");
    });
</script>
